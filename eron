#! /bin/bash 

# Paolo Lulli 2018

CURRDIR=$(dirname $0)

if [ -L $0 ]; then
    CURRDIR=$(dirname "$(readlink -f "$0")")
fi

ERON_LIBDIR=$CURRDIR/lib

if [ "$ERON_HOME" == "" ]; then
    ERON_HOME=$HOME/.eron
fi
if [ "$ERON_CONFIG_FILE" == "" ]; then
    CFG_FILE=$HOME/.eron.cfg
else
    CFG_FILE=$ERON_CONFIG_FILE
fi

WORKDIR=$ERON_HOME/tasks
JOBDIR=$ERON_HOME/jobs
DIAG_DB=$ERON_HOME/job-config.db

OUTPUTDIR=.
test -f $CFG_FILE && source $CFG_FILE
test -d $ERON_HOME || mkdir $ERON_HOME
test -d $WORKDIR || mkdir $WORKDIR
test -d $JOBDIR || mkdir $JOBDIR
SECURE_CA_HOME=${SECURE_HOME}/CA
CA_CERTIFICATE=${SECURE_CA_HOME}/ca.crt
CERTIFICATE=${SECURE_HOME}/${SECURE_SERVICE}/certs/${SECURE_CLIENT}/${SECURE_CLIENT}.crt
PRIVATE_KEY=${SECURE_HOME}/${SECURE_SERVICE}/certs/${SECURE_CLIENT}/${SECURE_CLIENT}.key

test -f ${CA_CERTIFICATE} || echo "Missing CA file: ${CA_CERTIFICATE}" 
test -f ${CERTIFICATE} || echo "Missing Certificate file: ${CERTIFICATE}"  
test -f ${PRIVATE_KEY} || echo "Missing Private KEY file: ${PRIVATE_KEY}"  

MODE="curl"
PARAM_PREFIX=""
TMPFILE=$(mktemp /tmp/unsecure_XXXXXXXX)
POST_BACKEND=${ENDPOINT}/content/post
GET_BACKEND=${ENDPOINT}/content/get

JSONENGINE_EXE=$CURRDIR/jsonengine

source $ERON_LIBDIR/eron_help.sh
source $ERON_LIBDIR/eron_config.sh
source $ERON_LIBDIR/eron_interactive.sh
source $ERON_LIBDIR/eron_filesystem.sh
source $ERON_LIBDIR/eron_get.sh
source $ERON_LIBDIR/eron_db.sh
source $ERON_LIBDIR/eron_security.sh
source $ERON_LIBDIR/eron_common.sh
source $ERON_LIBDIR/eron_mqtt.sh

# MAIN
test_config 
test -f $DIAG_DB || create_db

SERIAL_FILE=$ERON_HOME/.serial
test -f $SERIAL_FILE || uuidgen > $SERIAL_FILE
SERIAL_NO=$(cat $SERIAL_FILE)

OPTPARSE=`getopt -o hcLlYJTkzeti:W:u:S:E:I:O:r:R:p:o:g:D:s:X:b:x:\
	--long "help,\
	        create,\
	        list-remote,\
	        list,\
	        import-blob,\
	        list-job-definition,\
                list-task-definition,\
                get-client-certificate,\
                edit-job,\
                mqtt-subscribe,\
                file-import,\
                export-cronfile:,\
                upload-job:,\
                fetch-task:,\
                export-job:,\
                import-job:,\
                output-job-definition:,\
                cron-append:,\
                cron-set:,\
                cron-set-file:,\
                job-definition-to-file:,\
                job-skel-out:,\
                purge-job:, \
                save-content:, \
                execute-from:, \
                boot:, \
                execute:"  -n 'eron' -- "$@"`

#TODO : modes job task blob cron mqtt

if [ $? != 0 ] ; then echo "Exiting..."  >&2 ; exit 1 ; fi
if [ "$#" = 0 ] ; then cl_usage ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$OPTPARSE"

while true; do
  case "$1" in
    -c | --create ) 
        create_remote_content
        shift ;;
    -L | --list-remote ) 
        list_remote_content
        shift ;;
    -l | --list ) 
        list_local_jobs
        shift ;;
    -Y | --import-blob ) 
	remote_list_to_local_db
        shift ;;
    -J | --list-job-definition ) 
        print_job_list
        shift ;;
    -T | --list-task-definition ) 
        print_task_list
        shift ;;
    -k | --get-client-certificate ) 
        security_generate_csr
        security_renew_certificate
        shift ;;
    -z | --create ) 
        diagnostic
	dispatch 
        shift ;;
    -e | --edit-job ) 
        edit_job
        shift ;;
    -t | --mqtt-subscribe ) 
	mqtt_subscribe
        shift ;;
    -h | --help ) 
	cl_usage
        shift ;;
    -i | --upload-job ) 
	collect_file_input $2
	dispatch
	shift 2 ;;
    -W | --cron-push ) 
	collect_cron_input $2
	dispatch
	shift 2 ;;
    -u | --upload-job ) 
	upload_job_definition $2
	dispatch
	shift 2 ;;
    -S | --fetch-task ) 
        remote_to_local_db $2
	shift 2 ;;
    -E | --export-job ) 
	export_json_job $2
	shift 2 ;;
    -I | --import-job ) 
	import_json_job $2
	shift 2 ;;
    -O | --output-job-definition ) 
	export_job $2
	shift 2 ;;
    -R | --cron-set ) 
        cron_set_single_job $2
	shift 2 ;;
    -p | --cron-set-file ) 
        ${JSONENGINE_EXE} -c $2
	shift 2 ;;
    -o | --job-definition-to-file ) 
	export_job $2 > $JOBDIR/$2".json"
	shift 2 ;;
    -g | --job-skel-out ) 
	generate_local_tasks $2 
	shift 2 ;;
    -D | --purge-job ) 
	purge_job $2 
	shift 2 ;;
    -s | --save-content ) 
        retrieve_remote_content $2
	shift 2 ;;
    -X | --execute-from ) 
        execute_job_from_file $2
	shift 2 ;;
    -b | --boot ) 
	boot_from_job $2
	shift 2 ;;
    -x | --execute ) 
        execute_named_job $2
	shift 2 ;;
    -r | --cron-append ) 
	cron_append_job $2
	shift 2 ;;
    -- ) shift; break ;;
    * ) cl_usage break ;;
  esac
done
